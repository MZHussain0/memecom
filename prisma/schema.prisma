// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String      @id @default(cuid())
  name             String?
  email            String?     @unique
  emailVerified    DateTime?
  username         String?     @unique
  createdSubreddit Subreddit[] @relation("CreatedBy")

  image        String?
  accounts     Account[]
  sessions     Session[]
  Posts        Post[]
  Comments     Comment[]
  CommentVotes CommentVote[]
  Votes        Vote[]
  Subscribers  Subscription[]
}

model Subreddit {
  id    String @id @default(cuid())
  name  String @unique
  posts Post[]

  creatorId String?
  creator   User?   @relation("CreatedBy", fields: [creatorId], references: [id])

  subscribers Subscription[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([name])
}

model Subscription {
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  Subreddit   Subreddit @relation(fields: [subredditId], references: [id])
  subredditId String

  @@id([userId, subredditId])
}

model Post {
  id      String @id @default(cuid())
  title   String
  content Json?

  subredditId String
  subreddit   Subreddit @relation(fields: [subredditId], references: [id])

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  comments Comment[]
  votes    Vote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id   String @id @default(cuid())
  text String

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  postId String
  post   Post   @relation(fields: [postId], references: [id])

  replyToId String?
  replyTo   Comment?  @relation("replyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("replyTo")

  votes     CommentVote[]
  commentId String?

  createdAt DateTime @default(now())
}

enum VoteType {
  UP
  DOWN
}

model Vote {
  userId String
  user   User     @relation(fields: [userId], references: [id])
  postId String
  post   Post     @relation(fields: [postId], references: [id])
  type   VoteType

  @@id([postId, userId])
}

model CommentVote {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  Comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  type      VoteType

  @@id([commentId, userId])
}
